@model EpicockX.Models.BackOfficeIndexViewModel
@{
    var crud = "create";
}



<div class="accordion" id="productsAccordion">
    <!-- Prodotti esistenti -->
    <div class="accordion-item" id="getProducts">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                #1 Prodotti esistenti
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#getProducts">
            <div class="accordion-body">
                @if (Model.Products == null || !Model.Products.Any())
                {
                    <div class="text-center text-gray-500">
                        Non ci sono prodotti
                    </div>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">Nome</th>
                                <th scope="col">Descrizione</th>
                                <th scope="col">Quantità</th>
                                <th scope="col">Prezzo</th>
                                <th scope="col">Categoria</th>
                                <th scope="col">Marca</th>
                                <th scope="col">Azioni</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model.Products)
                            {
                                <tr>
                                    <td>@product.ProductName</td>
                                    <td>@((product.ProductDescription.Length > 50) ? product.ProductDescription.Substring(0, 50) + "..." : product.ProductDescription)</td>
                                    <td>@product.ProductQuantity</td>
                                    <td>@product.ProductPrice&euro;</td>
                                    <td>@product.ProductCategory</td>
                                    <td>@product.ProductBrand</td>
                                    <td>
                                        <button type="button" class="btn btn-primary btn-sm btnUpdate" data-id="@product.ProductId" data-name="@product.ProductName" data-description="@product.ProductDescription" data-quantity="@product.ProductQuantity" data-price="@product.ProductPrice" data-category="@product.ProductCategory" data-brand="@product.ProductBrand">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button  type="button" class="btn btn-danger btn-sm btnDelete" data-id="@product.ProductId">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
    <!-- Aggiungi un nuovo prodotto -->
    <div class="accordion-item" id="createProduct">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <span id="accordionTitle">#2 Aggiungi un nuovo prodotto</span>
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#createProduct">
            <div class="accordion-body">
                @using (Html.BeginForm("AddProduct", "BackOffice", FormMethod.Post, new { id = "addProductForm", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.NewProduct.ProductId, new {  id = "ProductId" })
                    @Html.Hidden("FormMode", "Create", new { id = "FormMode" })
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductName, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductName, new { @class = "form-control", @id = "ProductName", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductDescription, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductDescription, new { @class = "form-control", @id = "ProductDescription", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductQuantity, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductQuantity, new { @class = "form-control", @id = "ProductQuantity", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductPrice, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductPrice, new { @class = "form-control", @id = "ProductPrice", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductCategory, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductCategory, new { @class = "form-control", @id = "ProductCategory", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductBrand, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductBrand, new { @class = "form-control", @id = "ProductBrand", @required = "required" })
                    </div>
                    <div id="imageUploadContainerForAdd">
                        <label for="productImages">Carica immagini:</label>
                        <input type="file" name="productImages" class="product-image-input" multiple />

                    </div>
                    <button type="button" id="addMoreImagesForAdd">+</button>
                    <div>
                        <input type="submit" id="formButton" value="Aggiungi prodotto" class="btn btn-primary" />
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- Modifica un prodotto esistente -->
    <div class="accordion-item hidden" id="updateProduct">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                <span id="accordionTitle">#3 Modifica un prodotto esistente</span>
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#updateProduct">
            <div class="accordion-body">
                @using (Html.BeginForm("UpdateProduct", "BackOffice", FormMethod.Post, new { id = "updateProductForm", enctype = "multipart/form-data" }))
                {
                    @Html.HiddenFor(model => model.NewProduct.ProductId, new { id = "ProductId" })
                    @Html.Hidden("FormMode", "Edit", new { id = "FormMode" })
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductName, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductName, new { @class = "form-control", @id = "ProductName", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductDescription, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductDescription, new { @class = "form-control", @id = "ProductDescription", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductQuantity, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductQuantity, new { @class = "form-control", @id = "ProductQuantity", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductPrice, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductPrice, new { @class = "form-control", @id = "ProductPrice", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductCategory, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductCategory, new { @class = "form-control", @id = "ProductCategory", @required = "required" })
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.NewProduct.ProductBrand, new { @class = "block text-sm font-medium text-gray-700" })
                        @Html.TextBoxFor(model => model.NewProduct.ProductBrand, new { @class = "form-control", @id = "ProductBrand", @required = "required" })
                    </div>
                    <div id="imageUploadContainerForUpload">
                        <label for="productImages">Carica immagini:</label>
                        <input type="file" name="productImages" class="product-image-input" multiple />

                    </div>
                    <button type="button" id="addMoreImagesForUpload">+</button>
                    <div id="imagesContainer">
                    </div>
                    <div>
                        <input type="submit" id="formButton" value="Modifica" class="btn btn-primary" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modale di Conferma -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Conferma Cancellazione</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Sei sicuro di voler cancellare questo elemento?
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("DeleteProduct", "BackOffice", FormMethod.Post, new { id = "deleteProductForm" }))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" id="deleteProductId" value="" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Annulla</button>
                    <input type="submit" class="btn btn-danger" value="Conferma" />
                }
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="~/js/BackOfficeIndex.js"></script>
    <script>
        $(document).ready(function () {
            toastr.options = {
                "positionClass": "toast-top-right-cm",
                "progressBar": true,
                "preventDuplicates": true,
                "newestOnTop": false
            };
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                    toastr.success('@TempData["SuccessMessage"]');
            </text>
        }
        });
    </script>
}
